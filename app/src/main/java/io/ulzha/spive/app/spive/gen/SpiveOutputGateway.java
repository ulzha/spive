// Generated by io.ulzha.spive.codegen.GenerateIocCode - do not edit! Put application logic in Spive
// class that implements SpiveInstance interface.
package io.ulzha.spive.app.spive.gen;

import io.ulzha.spive.app.events.CreateEventLog;
import io.ulzha.spive.app.events.CreateInstance;
import io.ulzha.spive.app.events.CreateProcess;
import io.ulzha.spive.app.events.CreateStream;
import io.ulzha.spive.app.events.CreateType;
import io.ulzha.spive.app.events.DeleteInstance;
import io.ulzha.spive.app.events.DeleteProcess;
import io.ulzha.spive.app.events.InstanceIopw;
import io.ulzha.spive.app.events.InstanceProgress;
import io.ulzha.spive.app.events.InstanceStatusChange;
import io.ulzha.spive.lib.EventGateway;
import io.ulzha.spive.lib.EventIterator;
import io.ulzha.spive.lib.EventLock;
import io.ulzha.spive.lib.EventSerde;
import io.ulzha.spive.lib.EventTime;
import io.ulzha.spive.lib.umbilical.UmbilicalWriter;
import java.time.Instant;
import java.util.function.Supplier;

/**
 * Glue code generated by SpÄ«ve, which facilitates strongly typed output.
 *
 * <p>Thread-safe, made for use by concurrent workloads and event handlers.
 *
 * <p>The methods are merely adapting app events, via serde for the given Type, to generic
 * EventGateway interface.
 *
 * <p>This application consumes its own output stream, therefore implementations of emit* methods
 * must block on event handlers - hence the use of EventIterator to coordinate with EventLoop.
 */
// <PojoAsJson, or some scheme revolving around Types>
public class SpiveOutputGateway extends EventGateway {

  public SpiveOutputGateway(
      UmbilicalWriter umbilicus,
      EventIterator eventIterator,
      Supplier<Instant> wallClockTime,
      EventLock eventLock) {
    super(umbilicus, eventIterator, wallClockTime, eventLock);
  }

  private static final EventSerde createEventLogSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.CreateEventLog");

  private static final EventSerde createInstanceSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.CreateInstance");

  private static final EventSerde createProcessSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.CreateProcess");

  private static final EventSerde createStreamSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.CreateStream");

  private static final EventSerde createTypeSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.CreateType");

  private static final EventSerde deleteInstanceSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.DeleteInstance");

  private static final EventSerde deleteProcessSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.DeleteProcess");

  private static final EventSerde instanceIopwSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.InstanceIopw");

  private static final EventSerde instanceProgressSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.InstanceProgress");

  private static final EventSerde instanceStatusChangeSerde =
      EventSerde.forTypeTag("pojo:io.ulzha.spive.app.events.InstanceStatusChange");

  public boolean emitIf(Supplier<Boolean> check, CreateEventLog payload) {
    return emitIf(check, createEventLogSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateEventLog payload, EventTime eventTime) {
    return emitIf(check, createEventLogSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateInstance payload) {
    return emitIf(check, createInstanceSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateInstance payload, EventTime eventTime) {
    return emitIf(check, createInstanceSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateProcess payload) {
    return emitIf(check, createProcessSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateProcess payload, EventTime eventTime) {
    return emitIf(check, createProcessSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateStream payload) {
    return emitIf(check, createStreamSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateStream payload, EventTime eventTime) {
    return emitIf(check, createStreamSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateType payload) {
    return emitIf(check, createTypeSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateType payload, EventTime eventTime) {
    return emitIf(check, createTypeSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteInstance payload) {
    return emitIf(check, deleteInstanceSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteInstance payload, EventTime eventTime) {
    return emitIf(check, deleteInstanceSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteProcess payload) {
    return emitIf(check, deleteProcessSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteProcess payload, EventTime eventTime) {
    return emitIf(check, deleteProcessSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceIopw payload) {
    return emitIf(check, instanceIopwSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceIopw payload, EventTime eventTime) {
    return emitIf(check, instanceIopwSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceProgress payload) {
    return emitIf(check, instanceProgressSerde, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceProgress payload, EventTime eventTime) {
    return emitIf(check, instanceProgressSerde, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceStatusChange payload) {
    return emitIf(check, instanceStatusChangeSerde, payload);
  }

  public boolean emitIf(
      Supplier<Boolean> check, InstanceStatusChange payload, EventTime eventTime) {
    return emitIf(check, instanceStatusChangeSerde, payload, eventTime);
  }

  public void emitConsequential(CreateEventLog payload) {
    emitConsequential(createEventLogSerde, payload);
  }

  public void emitConsequential(CreateInstance payload) {
    emitConsequential(createInstanceSerde, payload);
  }

  public void emitConsequential(CreateProcess payload) {
    emitConsequential(createProcessSerde, payload);
  }

  public void emitConsequential(CreateStream payload) {
    emitConsequential(createStreamSerde, payload);
  }

  public void emitConsequential(CreateType payload) {
    emitConsequential(createTypeSerde, payload);
  }

  public void emitConsequential(DeleteInstance payload) {
    emitConsequential(deleteInstanceSerde, payload);
  }

  public void emitConsequential(DeleteProcess payload) {
    emitConsequential(deleteProcessSerde, payload);
  }

  public void emitConsequential(InstanceIopw payload) {
    emitConsequential(instanceIopwSerde, payload);
  }

  public void emitConsequential(InstanceProgress payload) {
    emitConsequential(instanceProgressSerde, payload);
  }

  public void emitConsequential(InstanceStatusChange payload) {
    emitConsequential(instanceStatusChangeSerde, payload);
  }
}
