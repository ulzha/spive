// Generated by io.ulzha.spive.codegen.GenerateIocCode - do not edit! Put application logic in Spive
// class that implements SpiveInstance interface.
package io.ulzha.spive.app.spive.gen;

import io.ulzha.spive.app.events.CreateEventLog;
import io.ulzha.spive.app.events.CreateInstance;
import io.ulzha.spive.app.events.CreateProcess;
import io.ulzha.spive.app.events.CreateStream;
import io.ulzha.spive.app.events.CreateType;
import io.ulzha.spive.app.events.DeleteInstance;
import io.ulzha.spive.app.events.DeleteProcess;
import io.ulzha.spive.app.events.InstanceIopw;
import io.ulzha.spive.app.events.InstanceProgress;
import io.ulzha.spive.app.events.InstanceStatusChange;
import io.ulzha.spive.lib.EventGateway;
import io.ulzha.spive.lib.EventIterator;
import io.ulzha.spive.lib.EventLock;
import io.ulzha.spive.lib.EventTime;
import io.ulzha.spive.lib.Type;
import io.ulzha.spive.lib.umbilical.UmbilicalWriter;
import java.time.Instant;
import java.util.function.Supplier;

/**
 * Glue code generated by SpÄ«ve, which facilitates strongly typed output.
 *
 * <p>Thread-safe, made for use by concurrent workloads and event handlers.
 *
 * <p>The methods are merely adapting app events, via serde for the given Type, to generic
 * EventGateway interface.
 *
 * <p>This application consumes its own output stream, therefore implementations of emit* methods
 * must block on event handlers - hence the use of EventIterator to coordinate with EventLoop.
 */
// <PojoAsJson, or some scheme revolving around Types>
public class SpiveOutputGateway extends EventGateway {

  public SpiveOutputGateway(
      UmbilicalWriter umbilicus,
      EventIterator eventIterator,
      Supplier<Instant> wallClockTime,
      EventLock eventLock) {
    super(umbilicus, eventIterator, wallClockTime, eventLock);
  }

  private static final Type createEventLogType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.CreateEventLog");

  private static final Type createInstanceType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.CreateInstance");

  private static final Type createProcessType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.CreateProcess");

  private static final Type createStreamType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.CreateStream");

  private static final Type createTypeType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.CreateType");

  private static final Type deleteInstanceType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.DeleteInstance");

  private static final Type deleteProcessType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.DeleteProcess");

  private static final Type instanceIopwType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.InstanceIopw");

  private static final Type instanceProgressType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.InstanceProgress");

  private static final Type instanceStatusChangeType =
      Type.fromTypeTag("pojo:io.ulzha.spive.app.events.InstanceStatusChange");

  public boolean emitIf(Supplier<Boolean> check, CreateEventLog payload) {
    return emitIf(check, createEventLogType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateEventLog payload, EventTime eventTime) {
    return emitIf(check, createEventLogType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateInstance payload) {
    return emitIf(check, createInstanceType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateInstance payload, EventTime eventTime) {
    return emitIf(check, createInstanceType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateProcess payload) {
    return emitIf(check, createProcessType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateProcess payload, EventTime eventTime) {
    return emitIf(check, createProcessType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateStream payload) {
    return emitIf(check, createStreamType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateStream payload, EventTime eventTime) {
    return emitIf(check, createStreamType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateType payload) {
    return emitIf(check, createTypeType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, CreateType payload, EventTime eventTime) {
    return emitIf(check, createTypeType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteInstance payload) {
    return emitIf(check, deleteInstanceType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteInstance payload, EventTime eventTime) {
    return emitIf(check, deleteInstanceType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteProcess payload) {
    return emitIf(check, deleteProcessType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, DeleteProcess payload, EventTime eventTime) {
    return emitIf(check, deleteProcessType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceIopw payload) {
    return emitIf(check, instanceIopwType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceIopw payload, EventTime eventTime) {
    return emitIf(check, instanceIopwType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceProgress payload) {
    return emitIf(check, instanceProgressType, payload);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceProgress payload, EventTime eventTime) {
    return emitIf(check, instanceProgressType, payload, eventTime);
  }

  public boolean emitIf(Supplier<Boolean> check, InstanceStatusChange payload) {
    return emitIf(check, instanceStatusChangeType, payload);
  }

  public boolean emitIf(
      Supplier<Boolean> check, InstanceStatusChange payload, EventTime eventTime) {
    return emitIf(check, instanceStatusChangeType, payload, eventTime);
  }

  public void emitConsequential(CreateEventLog payload) {
    emitConsequential(createEventLogType, payload);
  }

  public void emitConsequential(CreateInstance payload) {
    emitConsequential(createInstanceType, payload);
  }

  public void emitConsequential(CreateProcess payload) {
    emitConsequential(createProcessType, payload);
  }

  public void emitConsequential(CreateStream payload) {
    emitConsequential(createStreamType, payload);
  }

  public void emitConsequential(CreateType payload) {
    emitConsequential(createTypeType, payload);
  }

  public void emitConsequential(DeleteInstance payload) {
    emitConsequential(deleteInstanceType, payload);
  }

  public void emitConsequential(DeleteProcess payload) {
    emitConsequential(deleteProcessType, payload);
  }

  public void emitConsequential(InstanceIopw payload) {
    emitConsequential(instanceIopwType, payload);
  }

  public void emitConsequential(InstanceProgress payload) {
    emitConsequential(instanceProgressType, payload);
  }

  public void emitConsequential(InstanceStatusChange payload) {
    emitConsequential(instanceStatusChangeType, payload);
  }
}
