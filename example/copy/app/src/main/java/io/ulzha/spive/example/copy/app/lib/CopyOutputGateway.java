package io.ulzha.spive.example.copy.app.lib;

import io.ulzha.spive.example.copy.app.events.CreateFoo;
import io.ulzha.spive.lib.EventGateway;
import io.ulzha.spive.lib.EventIterator;
import io.ulzha.spive.lib.LockableEventLog;
import io.ulzha.spive.lib.Type;
import io.ulzha.spive.lib.umbilical.UmbilicalWriter;
import java.time.Instant;
import java.util.function.Supplier;

/**
 * Glue code generated by SpÄ«ve, which facilitates strongly typed output.
 *
 * <p>The methods are merely adapting app events, via serde for the given Type, to generic
 * EventGateway interface.
 */
public class CopyOutputGateway extends EventGateway {

  public CopyOutputGateway(
      UmbilicalWriter umbilicus,
      EventIterator eventIterator,
      Supplier<Instant> wallClockTime,
      LockableEventLog eventLog) {
    super(umbilicus, eventIterator, wallClockTime, eventLog);
  }

  private static final Type createFooType =
      Type.fromTypeTag("pojo:io.ulzha.spive.example.copy.app.events.CreateFoo");

  public boolean emitIf(Supplier<Boolean> check, CreateFoo payload) {
    return emitIf(check, createFooType, payload);
  }

  public boolean emitConsequential(CreateFoo payload) {
    return emitIf(() -> true, createFooType, payload);
  }
}
