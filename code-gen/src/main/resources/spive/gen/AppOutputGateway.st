AppOutputGateway(app, events) ::= <<
// Generated by io.ulzha.spive.codegen.GenerateIocCode - do not edit! Put application logic in %app.name% class that implements %app.name%Instance interface.
%app.package%

%events:{e | %e.import%}; separator="\n"%
import io.ulzha.spive.lib.EventGateway;
import io.ulzha.spive.lib.EventIterator;
import io.ulzha.spive.lib.EventTime;
import io.ulzha.spive.lib.LockableEventLog;
import io.ulzha.spive.lib.Type;
import io.ulzha.spive.lib.umbilical.UmbilicalWriter;
import java.time.Instant;
import java.util.function.Supplier;

/**
 * Glue code generated by SpÄ«ve, which facilitates strongly typed output.
%if(app.hasConcurrentWorkloads)%
 *
 * <p>Thread-safe, made for use by concurrent workloads and event handlers.
%endif%
 *
 * <p>The methods are merely adapting app events, via serde for the given Type, to generic
 * EventGateway interface.
%if(app.readsOwnOutput)%
 *
 * <p>This application consumes its own output stream, therefore implementations of emit* methods
 * must block on event handlers - hence the use of EventIterator to coordinate with EventLoop.
%endif%
 */
// <PojoAsJson, or some scheme revolving around Types>
public class %app.name%OutputGateway extends EventGateway {

  public %app.name%OutputGateway(
      UmbilicalWriter umbilicus,
      EventIterator eventIterator,
      Supplier<Instant> wallClockTime,
      LockableEventLog eventLog) {
    super(umbilicus, eventIterator, wallClockTime, eventLog);
  }

%events:{e | %e.type%}; separator="\n"%
%events:{e | %e.emitIf%}; separator="\n"%
%events:{e | %e.emitConsequential%}; separator="\n"%
}

>>
